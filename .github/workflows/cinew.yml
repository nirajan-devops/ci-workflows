name: Reusable Deploy to EC2 via GHCR

on:
  workflow_call:
    inputs:
      image-name:
        description: "Name (and tag) for your Docker image"
        required: true
        type: string
      container-name:
        description: "Container name to use on EC2"
        required: true
        type: string
      port:
        description: "Host port to bind"
        required: true
        type: string
      container-port:
        description: "Container port to expose"
        required: true
        type: string
      dockerfile-path:
        description: "Path to your Dockerfile"
        required: false
        type: string
        default: "Dockerfile"
      compose-file-path:
        description: "Path to your docker-compose.yml"
        required: false
        type: string
        default: "docker-compose.yml"
    secrets:
      HOST:
        required: true
      USERNAME:
        required: true
      SSH_PRIVATE_KEY:
        required: true
      GHCR_USERNAME:
        required: true
      GHCR_TOKEN:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GHCR
        run: |
          echo "${{ secrets.GHCR_TOKEN }}" \
            | docker login ghcr.io \
              -u "${{ secrets.GHCR_USERNAME }}" \
              --password-stdin

      - name: Determine if docker-compose.yml exists
        id: check-compose
        run: |
          if [[ -f "${{ inputs.compose-file-path }}" ]]; then
            echo "use_compose=true" >> "$GITHUB_OUTPUT"
          else
            echo "use_compose=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Build Docker image
        run: |
          if [[ "${{ steps.check-compose.outputs.use_compose }}" == "true" ]]; then
            docker compose \
              -f "${{ inputs.compose-file-path }}" build
          else
            docker build \
              -t ghcr.io/${{ secrets.GHCR_USERNAME }}/${{ inputs.image-name }} \
              -f "${{ inputs.dockerfile-path }}" .
          fi

      - name: Push image to GHCR
        run: |
          # Only a single‐container build gets pushed by name
          if [[ "${{ steps.check-compose.outputs.use_compose }}" == "false" ]]; then
            docker push ghcr.io/${{ secrets.GHCR_USERNAME }}/${{ inputs.image-name }}
          fi

      - name: Save image as TAR (if no compose)
        if: steps.check-compose.outputs.use_compose == 'false'
        run: |
          docker save \
            ghcr.io/${{ secrets.GHCR_USERNAME }}/${{ inputs.image-name }} \
            -o "${{ inputs.image-name }}.tar"

      - name: Copy deployment files to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "docker-compose.yml,${{ inputs.image-name }}.tar,nginx/default.conf"
          target: "/home/${{ secrets.USERNAME }}/deploy"
          overwrite: true
          rm: false

      - name: SSH & deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            cd ~/deploy

            # Ensure Docker & Compose are installed
            if ! command -v docker >/dev/null; then
              sudo apt-get update -y
              sudo apt-get install -y docker.io
              sudo systemctl enable --now docker
            fi
            if ! docker compose version >/dev/null 2>&1; then
              sudo mkdir -p /usr/local/lib/docker/cli-plugins
              sudo curl -SL \
                https://github.com/docker/compose/releases/download/v2.29.2/docker-compose-linux-x86_64 \
                -o /usr/local/lib/docker/cli-plugins/docker-compose
              sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
            fi

            if [[ -f "${{ inputs.compose-file-path }}" ]]; then
              # Multi-container via Compose
              sudo docker compose \
                -f "${{ inputs.compose-file-path }}" \
                up -d --build
            else
              # Single container via Dockerfile
              sudo docker load -i "${{ inputs.image-name }}.tar"
              sudo docker rm -f "${{ inputs.container-name }}" || true
              sudo docker run -d \
                --name "${{ inputs.container-name }}" \
                -p "${{ inputs.port }}:${{ inputs.container-port }}" \
                ghcr.io/${{ secrets.GHCR_USERNAME }}/${{ inputs.image-name }}
            fi

            sudo docker ps -a

name: Reusable Deploy to EC2 via GHCR

on:
  workflow_call:
    inputs:
      image-name:
        required: true
        type: string
      container-name:
        required: true
        type: string
      port:
        required: true
        type: string
      container-port:
        required: true
        type: string 
      dockerfile-path:
        required: false
        type: string
        default: "Dockerfile"
      docker-compose-path:
        required: false
        type: string
        default: "docker-compose.yml"  
    secrets:
      HOST:
        required: true
      USERNAME:
        required: true
      SSH_PRIVATE_KEY:
        required: true
      GHCR_USERNAME:
        required: true
      GHCR_TOKEN:
        required: true
      SLACK_WEBHOOK_URL:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin

      - name: Build Docker image
        run: |
          docker build -t ghcr.io/${{ secrets.GHCR_USERNAME }}/${{ inputs.image-name }} -f ${{ inputs.dockerfile-path }} .

      - name: Push image to GHCR
        run: |
          docker push ghcr.io/${{ secrets.GHCR_USERNAME }}/${{ inputs.image-name }}

      - name: Prepare deployment files
        run: |
          # Create deployment directory with all necessary files
          mkdir deployment
          cp ${{ inputs.docker-compose-path }} deployment/docker-compose.yml
          cp ${{ inputs.dockerfile-path }} deployment/Dockerfile
          cp -r wp-content deployment/wp-content

      - name: Copy deployment files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "deployment/*"
          target: "~/deployment"
          strip_components: 1

      - name: SSH and deploy containers
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ~/deployment
            
            # Install Docker & Docker Compose if needed
            if ! command -v docker &> /dev/null; then
              sudo apt update
              sudo apt install -y docker.io
              sudo systemctl enable docker
              sudo systemctl start docker
            fi
            if ! command -v docker compose &> /dev/null; then
              sudo curl -SL https://github.com/docker/compose/releases/download/v2.24.7/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose || true
            fi

            # Log in to GHCR
            echo "${{ secrets.GHCR_TOKEN }}" | sudo docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin

            # Stop and remove previous containers
            sudo docker compose -f docker-compose.yml down || true

            # Update image reference in docker-compose.yml
            sudo sed -i "s|ghcr.io/\$GHCR_USERNAME/${{ inputs.image-name }}|ghcr.io/${{ secrets.GHCR_USERNAME }}/${{ inputs.image-name }}|g" docker-compose.yml

            # Start multi-container app
            sudo docker compose -f docker-compose.yml up -d

      - name: Notify Slack on Success
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"✅ CI Workflow *${{ github.workflow }}* succeeded for `${{ github.repository }}` on branch `${{ github.ref_name }}`."}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Failure
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"❌ CI Workflow *${{ github.workflow }}* failed for `${{ github.repository }}` on branch `${{ github.ref_name }}`."}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}